*jobmake.txt*	For Vim version 7.4 and Neovim	Last change: Jan 22 2016

Jobmake

        Runs make tasks and syntax checkers asynchronously (for neovim)

==============================================================================
CONTENTS                                                      *jobmake-contents*

1. Introduction                                           |jobmake-introduction|
2. Commands                                                   |jobmake-commands|
3. Configuration                                         |jobmake-configuration|
4. Functions                                                 |jobmake-functions|

==============================================================================
1. Introduction                                           *jobmake-introduction*

Jobmake leverages neovim's |job-control| feature where available to run
programs like syntax checkers asynchronously. Where job control is not
available, it resorts to a synchronous |system()| call, making it possible to
run this plugin in both vim and neovim. This plugin is heavily inspired by
fantastic vim plugins such as syntastic and dispatch.

==============================================================================
2. Commands                                                   *jobmake-commands*

                                         *jobmake-:Jobmake* *jobmake-:JobmakeFile*
:Jmake                Run a make command with the current file as input.

                                     *jobmake-:Jobmake!* *jobmake-:JobmakeProject*
:Jmake!               Run a make command with no file as input.

                                                      *jobmake-:JobmakeListJobs*
:JmakeListJobs        List all running jobs in the format: >
                        job_id job_name
<
                                                     *jobmake-:JobmakeCancelJob*
:JmakeCancelJob *{job_id}*
                      Sends a 'jobstop' to *job_id* which terminates the job.

==============================================================================
3. Configuration                                         *jobmake-configuration*

If you just want an easy way to run |:make| asynchronously, you're all set.
Just set your |makeprg| and |errorformat| as usual, and run |:Jobmake!|. If
you want more, read on.

Global Options                                                 *jobmake-options*

*g:jobmake_open_list*
This setting will open the |loclist| or |quickfix| list (depending on whether
it is operating on a file) when adding entries. A value of 2 will preserve the
cursor position when the |loclist| or |quickfix| window is opened. Defaults to 0.

*g:jobmake_list_height*
The height of the |loclist| or |quickfix| list opened by jobmake.
Defaults to 10.

*g:jobmake_echo_current_error*
This setting will echo the error for the line your cursor is on, if any.
Defaults to 1.

*g:jobmake_serialize_abort_on_error*
Setting this to 1 tells jobmake to abort after the first error status is
encountered. This setting only works when |g:jobmake_serialize| is on.

*g:jobmake_verbose*
Controls how verbose jobmake should be. Jobmake log levels are as follows:
    0 - Errors only
    1 - Quiet message (default -- should only log one message at a time)
    2 - Loud message (may log multiple messages at once, making the screen
        shift momentarily)
    3 - Debug information, normally relevant only to people who develop
        jobmake.
Each log level includes all the levels before it.

*g:jobmake_logfile*
Specify a logfile where all log messages will be logged. The setting
|g:jobmake_verbose| does not influence which messages will be logged to file,
making it possible to reduce the number of messages you see in your editor
without losing that information should you need it. Mainly for people hacking
on jobmake itself. This feature is not yet cross-platform.

*g:jobmake_airline*
Shows the output returned by |jobmake#statusline#LoclistStatus| in the warning
section of the vim-airline |statusline|. Defaults to 1.

==============================================================================
4. Functions                                                 *jobmake-functions*

This list is non-exhaustive at the moment, but you may find some of these
functions useful.

*jobmake#Make* (filemode)
This function is called by |:Jmake(!)| command.  If *filemode* is 1, then
the current file is used as input. |jobmake#Make| returns an
array of the job ids that it creates via 'jobstart'; you can potentially
cancel these jobs with |jobmake#CancelJob|.

*jobmake#Sh* (command)
This function is called by the |:JmakeSh| command. It runs the specified
shell *command* according to 'shell'. |jobmake#Sh| returns the single job id
that it creates via 'jobstart'; you can potentially cancel this job with
|jobmake#CancelJob|.

*jobmake#ListJobs*
Invoked via |:JmakeListJobs|. Echoes a list of running jobs in the format
(job_id, job_name).

*jobmake#CancelJob*
Invoked via |:JmakeCancelJob|. Sends a 'jobstop' to the job id specified.
Will trigger callback if it was specified when the job was started.
Example: >
    let job_id = jobmake#Sh("bash -c 'while true; do sleep 1; done'")
    call jobmake#CancelJob(job_id)

                                                            *jobmake-statusline*
*jobmake#statusline#LoclistStatus* *jobmake#statusline#QflistStatus*
These functions return text for your |statusline|. They each take an optional
first argument, which is the prefix text that will be shown if errors or
warnings exist. Example usage: >
    set statusline+=\ %#ErrorMsg#%{jobmake#statusline#QflistStatus('qf:\ ')}
<
The result of this will be something like 'qf: E:1, W:2' if there are errors
or warnings and the empty string otherwise.

*jobmake#statusline#LoclistCounts* *jobmake#statusline#QflistCounts*
These functions get the counts of errors by error type for the |location-list|
and the |quickfix| respectively. The return value is something like this: >
    {'E': 2, 'W': 1, 'x': 5}
<Where 'E', 'W' and 'x' are error types. Empty error types are ignored for now.

By default, *LoclistCounts* returns the counts for the current buffer (i.e.
`bufnr("%")`), but you can pass an optional argument: passing a buffer number
will retrieve the counts for a particular buffer, while passing the string
`'all'` will return a dictionary of counts for all buffers.

*jobmake#ProcessCurrentWindow*
This is the function that takes the job output and puts it into the loclist or
qflist, etc. Currently, if you stay in the window you called
|:Jobmake| from, this will happen as the job output comes in. However, if you go
to a different window, jobmake will wait until you return to that window for
the job output to be processed. Currently, that will happen on |WinEnter| and
|CursorHold|. You can also call this function directly if you need to force
it. This function is not currently used for |:Jobmake!|, which always
processes its output as it arrives.

vim: ft=help tw=78
